#!/usr/bin/env python3
"""
Naprawiona wersja migracji c46ca71949f5
Bezpiecznie obs≈Çuguje tokeny d≈Çu≈ºsze ni≈º 36 znak√≥w
"""
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '.')))

from app import create_app, db
from sqlalchemy import text

def fix_migration():
    """Naprawia migracjƒô c46ca71949f5"""
    app = create_app()
    
    with app.app_context():
        try:
            print("üîß Naprawianie migracji c46ca71949f5...")
            
            # 1. Sprawd≈∫ czy tabela password_reset_tokens istnieje
            result = db.session.execute(text("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_name = 'password_reset_tokens'
                )
            """)).scalar()
            
            if not result:
                print("‚úÖ Tabela password_reset_tokens nie istnieje - pomijam")
                return True
            
            # 2. Sprawd≈∫ aktualnƒÖ d≈Çugo≈õƒá kolumny token
            column_info = db.session.execute(text("""
                SELECT character_maximum_length 
                FROM information_schema.columns 
                WHERE table_name = 'password_reset_tokens' 
                AND column_name = 'token'
            """)).scalar()
            
            print(f"üìä Aktualna d≈Çugo≈õƒá kolumny token: {column_info}")
            
            # 3. Sprawd≈∫ czy sƒÖ tokeny d≈Çu≈ºsze ni≈º 36 znak√≥w
            long_tokens_count = db.session.execute(text("""
                SELECT COUNT(*) 
                FROM password_reset_tokens 
                WHERE LENGTH(token) > 36
            """)).scalar()
            
            print(f"üìä Tokeny d≈Çu≈ºsze ni≈º 36 znak√≥w: {long_tokens_count}")
            
            if long_tokens_count > 0:
                print("‚ö†Ô∏è  Znaleziono tokeny d≈Çu≈ºsze ni≈º 36 znak√≥w")
                
                # Opcja 1: Skr√≥ƒá tokeny do 36 znak√≥w
                print("üîß Skracanie token√≥w do 36 znak√≥w...")
                db.session.execute(text("""
                    UPDATE password_reset_tokens 
                    SET token = LEFT(token, 36)
                    WHERE LENGTH(token) > 36
                """))
                db.session.commit()
                print("‚úÖ Tokeny zosta≈Çy skr√≥cone")
            
            # 4. Teraz bezpiecznie zmie≈Ñ typ kolumny
            if column_info != 36:
                print("üîß Zmienianie typu kolumny token na VARCHAR(36)...")
                
                # Usu≈Ñ istniejƒÖce indeksy i ograniczenia
                try:
                    db.session.execute(text("DROP INDEX IF EXISTS ix_password_reset_tokens_token"))
                    db.session.execute(text("ALTER TABLE password_reset_tokens DROP CONSTRAINT IF EXISTS password_reset_tokens_token_key"))
                except Exception as e:
                    print(f"‚ö†Ô∏è  Ostrze≈ºenie przy usuwaniu indeks√≥w: {e}")
                
                # Zmie≈Ñ typ kolumny
                db.session.execute(text("""
                    ALTER TABLE password_reset_tokens 
                    ALTER COLUMN token TYPE VARCHAR(36)
                """))
                
                # Utw√≥rz nowy indeks
                db.session.execute(text("""
                    CREATE UNIQUE INDEX ix_password_reset_tokens_token 
                    ON password_reset_tokens (token)
                """))
                
                db.session.commit()
                print("‚úÖ Kolumna token zosta≈Ça zmieniona na VARCHAR(36)")
            else:
                print("‚úÖ Kolumna token ju≈º ma d≈Çugo≈õƒá 36 znak√≥w")
            
            # 5. Sprawd≈∫ ko≈Ñcowy stan
            final_length = db.session.execute(text("""
                SELECT character_maximum_length 
                FROM information_schema.columns 
                WHERE table_name = 'password_reset_tokens' 
                AND column_name = 'token'
            """)).scalar()
            
            print(f"‚úÖ Ko≈Ñcowa d≈Çugo≈õƒá kolumny token: {final_length}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd: {e}")
            import traceback
            traceback.print_exc()
            return False

if __name__ == "__main__":
    print("üîß Naprawianie migracji c46ca71949f5")
    print("=" * 50)
    
    success = fix_migration()
    
    if success:
        print("\n‚úÖ Migracja naprawiona pomy≈õlnie")
        print("Mo≈ºesz teraz uruchomiƒá: flask db upgrade")
    else:
        print("\n‚ùå B≈ÇƒÖd podczas naprawiania migracji")
        sys.exit(1)
