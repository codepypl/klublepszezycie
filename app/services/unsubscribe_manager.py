"""
Nowy system zarzƒÖdzania wypisywaniem z klubu i usuwaniem konta
Tokeny zawierajƒÖ zaszyfrowany email i majƒÖ okre≈õlonƒÖ wa≈ºno≈õƒá
"""
import hmac
import hashlib
import secrets
import base64
import json
import os
from datetime import datetime, timedelta
from typing import Optional, Tuple, Dict, Any
from app import db
from app.models.user_model import User

class UnsubscribeManager:
    """Nowy manager dla unsubscribe i delete account z tokenami zawierajƒÖcymi email"""
    
    def __init__(self):
        self.secret_key = 'klublepszezycie_unsubscribe_v2_2024'  # Fixed secret key
        self.token_expiry_days = 30
        self.base_url = os.getenv('BASE_URL', 'https://klublepszezycie.pl')
        
        # Ensure URL has protocol
        if self.base_url and not self.base_url.startswith(('http://', 'https://')):
            self.base_url = f'https://{self.base_url}'
    
    def generate_token(self, email: str, action: str) -> str:
        """
        Generuje token zawierajƒÖcy zaszyfrowany email i akcjƒô
        Format: base64(json({email, action, expires_at, random}):hmac_signature)
        """
        try:
            # Zaszyfruj email u≈ºywajƒÖc prostego szyfrowania
            encrypted_email = self._encrypt_email(email)
            
            # Utw√≥rz payload
            expires_at = datetime.utcnow() + timedelta(days=self.token_expiry_days)
            payload = {
                'email': encrypted_email,
                'action': action,
                'expires_at': expires_at.isoformat(),
                'random': secrets.token_hex(16)
            }
            
            # Serializuj do JSON
            payload_json = json.dumps(payload, sort_keys=True)
            
            # Wygeneruj HMAC signature
            signature = hmac.new(
                self.secret_key.encode('utf-8'),
                payload_json.encode('utf-8'),
                hashlib.sha256
            ).hexdigest()
            
            # Po≈ÇƒÖcz payload z signature
            token_data = f"{payload_json}:{signature}"
            
            # Encode do base64 URL-safe
            token = base64.urlsafe_b64encode(token_data.encode('utf-8')).decode('ascii')
            
            print(f"üîë Generated {action} token for {email}")
            print(f"   Expires: {expires_at.strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"   Token: {token[:50]}...")
            
            return token
            
        except Exception as e:
            print(f"‚ùå Error generating token: {e}")
            return None
    
    def verify_token(self, token: str) -> Tuple[bool, Optional[Dict[str, Any]]]:
        """
        Weryfikuje token i zwraca dane u≈ºytkownika
        Returns: (is_valid, user_data)
        """
        try:
            # Decode base64
            token_data = base64.urlsafe_b64decode(token.encode('ascii')).decode('utf-8')
            
            # Podziel na payload i signature
            if ':' not in token_data:
                return False, None
            
            payload_json, signature = token_data.rsplit(':', 1)
            
            # Weryfikuj HMAC signature
            expected_signature = hmac.new(
                self.secret_key.encode('utf-8'),
                payload_json.encode('utf-8'),
                hashlib.sha256
            ).hexdigest()
            
            if not hmac.compare_digest(signature, expected_signature):
                print(f"‚ùå Invalid token signature")
                return False, None
            
            # Parsuj payload
            payload = json.loads(payload_json)
            
            # Sprawd≈∫ czy token nie wygas≈Ç
            expires_at = datetime.fromisoformat(payload['expires_at'])
            if datetime.utcnow() > expires_at:
                print(f"‚ùå Token expired at {expires_at}")
                return False, None
            
            # Odszyfruj email
            email = self._decrypt_email(payload['email'])
            if not email:
                print(f"‚ùå Failed to decrypt email")
                return False, None
            
            # Znajd≈∫ u≈ºytkownika
            user = User.query.filter_by(email=email).first()
            if not user:
                print(f"‚ùå User not found: {email}")
                return False, None
            
            print(f"‚úÖ Valid {payload['action']} token for {email}")
            print(f"   Expires: {expires_at.strftime('%Y-%m-%d %H:%M:%S')}")
            
            return True, {
                'user': user,
                'email': email,
                'action': payload['action'],
                'expires_at': expires_at
            }
            
        except Exception as e:
            print(f"‚ùå Error verifying token: {e}")
            return False, None
    
    def get_unsubscribe_url(self, email: str) -> str:
        """Generuje URL do wypisania siƒô z klubu"""
        token = self.generate_token(email, 'unsubscribe')
        if not token:
            return None
        return f"{self.base_url}/unsubscribe/{token}"
    
    def get_delete_account_url(self, email: str) -> str:
        """Generuje URL do usuniƒôcia konta"""
        token = self.generate_token(email, 'delete_account')
        if not token:
            return None
        return f"{self.base_url}/remove-account/{token}"
    
    def process_unsubscribe(self, user: User) -> Tuple[bool, str]:
        """Przetwarza wypisanie u≈ºytkownika z klubu"""
        try:
            # Usu≈Ñ z klubu
            user.club_member = False
            
            # Usu≈Ñ z grupy cz≈Çonk√≥w klubu
            from app.models import UserGroup, UserGroupMember
            club_group = UserGroup.query.filter_by(group_type='club_members').first()
            if club_group:
                member = UserGroupMember.query.filter_by(
                    user_id=user.id, group_id=club_group.id
                ).first()
                if member:
                    db.session.delete(member)
            
            db.session.commit()
            
            print(f"‚úÖ User {user.email} unsubscribed from club")
            return True, f"Zosta≈Çe≈õ wypisany z klubu"
            
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå Error processing unsubscribe: {e}")
            return False, f"B≈ÇƒÖd: {str(e)}"
    
    def process_account_deletion(self, user: User) -> Tuple[bool, str]:
        """Przetwarza usuniƒôcie konta u≈ºytkownika"""
        try:
            user_email = user.email
            
            # Usu≈Ñ u≈ºytkownika
            db.session.delete(user)
            db.session.commit()
            
            print(f"‚úÖ Account {user_email} deleted")
            return True, f"Konto zosta≈Ço usuniƒôte"
            
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå Error processing account deletion: {e}")
            return False, f"B≈ÇƒÖd: {str(e)}"
    
    def _encrypt_email(self, email: str) -> str:
        """Proste szyfrowanie emaila"""
        try:
            # U≈ºyj HMAC jako prostego szyfrowania
            encrypted = hmac.new(
                self.secret_key.encode('utf-8'),
                email.encode('utf-8'),
                hashlib.sha256
            ).hexdigest()
            return encrypted
        except Exception as e:
            print(f"‚ùå Error encrypting email: {e}")
            return None
    
    def _decrypt_email(self, encrypted_email: str) -> Optional[str]:
        """Odszyfrowanie emaila - wymaga sprawdzenia w bazie danych"""
        try:
            # Znajd≈∫ u≈ºytkownika kt√≥rego zaszyfrowany email pasuje
            users = User.query.all()
            for user in users:
                if self._encrypt_email(user.email) == encrypted_email:
                    return user.email
            return None
        except Exception as e:
            print(f"‚ùå Error decrypting email: {e}")
            return None


# Global instance
unsubscribe_manager = UnsubscribeManager()
