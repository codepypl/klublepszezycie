"""Rename user_history to user_logs and create new user_history table

Revision ID: af25e20522fc
Revises: 7d9e1b0dfbab
Create Date: 2025-09-19 02:23:56.318331

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'af25e20522fc'
down_revision = '7d9e1b0dfbab'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user_history', schema=None) as batch_op:
        batch_op.add_column(sa.Column('registration_type', sa.String(length=20), nullable=False))
        batch_op.add_column(sa.Column('was_club_member', sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column('registration_date', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('participation_date', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('status', sa.String(length=20), nullable=False))
        batch_op.add_column(sa.Column('notes', sa.Text(), nullable=True))
        batch_op.alter_column('event_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.drop_index(batch_op.f('ix_user_history_action_type'))
        batch_op.create_unique_constraint('_unique_user_event_history', ['user_id', 'event_id'])
        batch_op.create_index(batch_op.f('ix_user_history_registration_date'), ['registration_date'], unique=False)
        batch_op.drop_constraint(batch_op.f('user_history_group_id_fkey'), type_='foreignkey')
        batch_op.drop_column('action_type')
        batch_op.drop_column('ip_address')
        batch_op.drop_column('extra_data')
        batch_op.drop_column('group_id')
        batch_op.drop_column('description')
        batch_op.drop_column('user_agent')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user_history', schema=None) as batch_op:
        batch_op.add_column(sa.Column('user_agent', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('description', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('group_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('extra_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('action_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
        batch_op.create_foreign_key(batch_op.f('user_history_group_id_fkey'), 'user_groups', ['group_id'], ['id'])
        batch_op.drop_index(batch_op.f('ix_user_history_registration_date'))
        batch_op.drop_constraint('_unique_user_event_history', type_='unique')
        batch_op.create_index(batch_op.f('ix_user_history_action_type'), ['action_type'], unique=False)
        batch_op.alter_column('event_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.drop_column('notes')
        batch_op.drop_column('status')
        batch_op.drop_column('participation_date')
        batch_op.drop_column('registration_date')
        batch_op.drop_column('was_club_member')
        batch_op.drop_column('registration_type')

    # ### end Alembic commands ###
