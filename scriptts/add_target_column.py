#!/usr/bin/env python3
"""
Skrypt do dodania kolumny 'target' do tabeli social_links (PostgreSQL)
Uruchom na serwerze: python add_target_column.py
"""

import os
import sys
from sqlalchemy import create_engine, text
from dotenv import load_dotenv

# Za≈Çaduj zmienne ≈õrodowiskowe
load_dotenv()

def get_database_url():
    """Pobiera URL bazy danych z zmiennych ≈õrodowiskowych"""
    # Sprawd≈∫ r√≥≈ºne mo≈ºliwe nazwy zmiennych
    db_url = os.getenv('DATABASE_URL') or os.getenv('DEV_DATABASE_URL') or os.getenv('TEST_DATABASE_URL')
    
    if not db_url:
        print("‚ùå B≈ÇƒÖd: Nie znaleziono DATABASE_URL w zmiennych ≈õrodowiskowych")
        print("Sprawd≈∫ czy plik .env istnieje i zawiera DATABASE_URL")
        return None
    
    return db_url

def add_target_column():
    """Dodaje kolumnƒô target do tabeli social_links"""
    
    # Pobierz URL bazy danych
    db_url = get_database_url()
    if not db_url:
        return False
    
    try:
        # Po≈ÇƒÖczenie z bazƒÖ danych PostgreSQL
        engine = create_engine(db_url)
        conn = engine.connect()
        
        print("=== DODAWANIE KOLUMNY 'target' DO TABELI social_links (PostgreSQL) ===")
        
        # Sprawd≈∫ czy kolumna target ju≈º istnieje
        result = conn.execute(text("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'social_links' AND column_name = 'target'
        """))
        
        target_exists = result.fetchone() is not None
        
        if target_exists:
            print("‚úÖ Kolumna 'target' ju≈º istnieje!")
            return True
        
        # Pobierz listƒô obecnych kolumn
        result = conn.execute(text("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'social_links'
            ORDER BY ordinal_position
        """))
        
        columns = [row[0] for row in result.fetchall()]
        print(f"Obecne kolumny: {', '.join(columns)}")
        
        # Dodaj kolumnƒô target
        print("‚ûï Dodawanie kolumny 'target'...")
        conn.execute(text("""
            ALTER TABLE social_links 
            ADD COLUMN target VARCHAR(20) DEFAULT '_blank'
        """))
        
        # Zatwierd≈∫ zmiany
        conn.commit()
        
        # Sprawd≈∫ wynik
        result = conn.execute(text("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'social_links'
            ORDER BY ordinal_position
        """))
        
        columns_after = [row[0] for row in result.fetchall()]
        print(f"‚úÖ Kolumny po zmianie: {', '.join(columns_after)}")
        
        if 'target' in columns_after:
            print("üéâ Kolumna 'target' zosta≈Ça pomy≈õlnie dodana!")
            
            # Sprawd≈∫ ile rekord√≥w jest w tabeli
            result = conn.execute(text("SELECT COUNT(*) FROM social_links"))
            count = result.fetchone()[0]
            print(f"üìä Liczba rekord√≥w w tabeli: {count}")
            
            return True
        else:
            print("‚ùå B≈ÇƒÖd: Kolumna 'target' nie zosta≈Ça dodana!")
            return False
            
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd: {e}")
        return False
    finally:
        if 'conn' in locals():
            conn.close()

def verify_changes():
    """Sprawdza czy zmiany zosta≈Çy poprawnie zastosowane"""
    
    # Pobierz URL bazy danych
    db_url = get_database_url()
    if not db_url:
        return False
    
    try:
        engine = create_engine(db_url)
        conn = engine.connect()
        
        print("\n=== WERYFIKACJA ZMIAN ===")
        
        # Sprawd≈∫ strukturƒô tabeli
        result = conn.execute(text("""
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'social_links'
            ORDER BY ordinal_position
        """))
        
        columns = result.fetchall()
        
        print("Struktura tabeli social_links:")
        for col in columns:
            print(f"  - {col[0]}: {col[1]} (nullable: {col[2]}, default: {col[3]})")
        
        # Sprawd≈∫ przyk≈Çadowe dane
        result = conn.execute(text("SELECT id, platform, url, target FROM social_links LIMIT 3"))
        records = result.fetchall()
        
        if records:
            print(f"\nPrzyk≈Çadowe rekordy:")
            for record in records:
                print(f"  ID: {record[0]}, Platform: {record[1]}, URL: {record[2]}, Target: {record[3]}")
        else:
            print("\nBrak rekord√≥w w tabeli social_links")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd podczas weryfikacji: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Uruchamianie skryptu dodawania kolumny 'target'...")
    
    success = add_target_column()
    
    if success:
        verify_changes()
        print("\n‚úÖ Skrypt zako≈Ñczony pomy≈õlnie!")
        print("Teraz mo≈ºesz u≈ºywaƒá pola 'target' w social linkach.")
    else:
        print("\n‚ùå Skrypt zako≈Ñczony z b≈Çƒôdami!")
        print("Sprawd≈∫ logi powy≈ºej i spr√≥buj ponownie.")
